# Задача 1: Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. Поскольку
# разобраться в его кричалках не настолько просто, насколько легко он их придумывает, Вам
# стоит написать программу. Винни-Пух считает, что ритм есть, если число слогов (т.е. число
# гласных букв) в каждой фразе стихотворения одинаковое. Фраза может состоять из одного
# слова, если во фразе несколько слов, то они разделяются дефисами. Фразы отделяются друг
# от друга пробелами. Стихотворение Винни-Пух вбивает в программу с клавиатуры. В ответе
# напишите “Парам пам-пам”, если с ритмом все в порядке и “Пам парам”, если с ритмом все не
# в порядке
# Ввод: Вывод:
# пара-ра-рам рам-пам-папам па-ра-па-дам Парам пам-пам

# def count_vowels(phrase):
#     """Функция для подсчета гласных в фразе."""
#     vowels = set("аеёиоуыэюя")
#     return sum(1 for char in phrase if char in vowels)

# def check_rhythm(poem):
#     """Функция для проверки ритма стихотворения."""
#     # Разбиваем стихотворение на фразы
#     phrases = poem.split()
    
#     # Считаем количество гласных в каждой фразе
#     syllable_counts = list(map(count_vowels, phrases))
    
#     # Проверяем, одинаково ли количество слогов во всех фразах
#     return "Парам пам-пам" if all(syllable_counts[0] == count for count in syllable_counts) else "Пам парам"

# # Пример использования
# poem_input = input("Введите стихотворение Винни-Пуха: ")
# result = check_rhythm(poem_input)
# print(result)


# Задача 2: Напишите функцию print_operation_table(operation, num_rows=6, num_columns=6),
# которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки и
# столбца. Аргументы num_rows и num_columns указывают число строк и столбцов таблицы,
# которые должны быть распечатаны. Нумерация строк и столбцов идет с единицы (подумайте,
# почему не с нуля). Примечание: бинарной операцией называется любая операция, у которой
# ровно два аргумента, как, например, у операции умножения.
# Ввод: Вывод:
# print_operation_table(lambda x, y: x * y) 1 2 3 4 5 6
#  2 4 6 8 10 12
#  3 6 9 12 15 18
#  4 8 12 16 20 24
#  5 10 15 20 25 30
#  6 12 18 24 30 36 

def print_operation_table(operation, num_rows=6, num_columns=6):
    # Формируем таблицу с использованием функции высшего порядка map
    for i in range(1, num_rows + 1):
        row = map(lambda j: operation(i, j), range(1, num_columns + 1))
        print(*row)

# Пример использования
print_operation_table(lambda x, y: x * y)
