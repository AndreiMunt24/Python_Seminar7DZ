# zadacha 1
"""
transformation = lambda x: x
values = [1, 23, 42, 'asdfg']
transformed_values = list(map(transformation, values))

if values == transformed_values:
    print('ok')
else:
    print('fail')
"""    
# zadacha 2


# def hello(name):
#     return f"Hi, {name}!"

# def bye(name):
#     return f"{name}, bye-bye!"

# def make_phrase(func):
#     name = input("Введите свое имя: ")
#     print(func(name))

# make_phrase(hello)
# make_phrase(bye)

# calc = {
#     "+": lambda x,y: x + y,
#     "-": lambda x,y: x - y,
#     "/": lambda x,y: x / y,
#     "*": lambda x,y: x * y,
#         }

# eq = input("Введите арифметическое выражение ")
# num1, op, num2 = eq.split()
# print(calc[op](int(num1), int(num2)))


# Задача №2. Решение в группах
# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая
# планета ровно одна

# Ввод:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))
# Вывод:
# 2
import math

def find_farthest_orbit(list_of_orbits):
    # Фильтруем только эллиптические орбиты (где a != b)
    ellipses = [orbit for orbit in list_of_orbits if orbit[0] != orbit[1]]
    
    # Вычисляем площади для всех эллиптических орбит
    areas = [math.pi * a * b for a, b in ellipses]
    
    # Находим индекс орбиты с максимальной площадью
    max_area_index = areas.index(max(areas))
    
    # Возвращаем орбиту с максимальной площадью
    return ellipses[max_area_index]

# Пример использования функции
orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(*find_farthest_orbit(orbits))






# Задача №3. Решение в группах
# Напишите функцию same_by(characteristic, objects), которая
# проверяет, все ли объекты имеют одинаковое значение
# некоторой характеристики, и возвращают True, если это так.
# Если значение характеристики для разных объектов
# отличается - то False. Для пустого набора объектов, функция
# должна возвращать True. Аргумент characteristic - это
# функция, которая принимает объект и вычисляет его
# характеристику.
# Ввод: Вывод:
# values = [0, 2, 10, 6] same
# if same_by(lambda x: x % 2, values):
# print(‘same’)
# else:
# print(‘different’)